//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `dominoVideoAds.mp4`.
    static let dominoVideoAdsMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "dominoVideoAds", pathExtension: "mp4")
    
    /// `bundle.url(forResource: "dominoVideoAds", withExtension: "mp4")`
    static func dominoVideoAdsMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dominoVideoAdsMp4
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 41 images.
  struct image {
    /// Image `full_pizza-full-plain-cheese`.
    static let full_pizzaFullPlainCheese = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_pizza-full-plain-cheese")
    /// Image `full_pizza-sambal-veggie`.
    static let full_pizzaSambalVeggie = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_pizza-sambal-veggie")
    /// Image `full_pizza-spicy-sambal`.
    static let full_pizzaSpicySambal = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_pizza-spicy-sambal")
    /// Image `full_pizza-ultim-hawaiian`.
    static let full_pizzaUltimHawaiian = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_pizza-ultim-hawaiian")
    /// Image `full_pizza-vegie-fiesta`.
    static let full_pizzaVegieFiesta = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_pizza-vegie-fiesta")
    /// Image `full_pizza-vegie-galore`.
    static let full_pizzaVegieGalore = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_pizza-vegie-galore")
    /// Image `full_samyeang-chicken-pizza`.
    static let full_samyeangChickenPizza = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_samyeang-chicken-pizza")
    /// Image `full_samyeang-tuna-pizza`.
    static let full_samyeangTunaPizza = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_samyeang-tuna-pizza")
    /// Image `icon-image-100`.
    static let iconImage100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-image-100")
    /// Image `icon-image-500`.
    static let iconImage500 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-image-500")
    /// Image `icon-image-50`.
    static let iconImage50 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-image-50")
    /// Image `icon_samyeangsaucered`.
    static let icon_samyeangsaucered = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_samyeangsaucered")
    /// Image `icon_sauce-chili`.
    static let icon_sauceChili = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sauce-chili")
    /// Image `icon_sauce-pesto`.
    static let icon_saucePesto = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sauce-pesto")
    /// Image `icon_sauce-secret`.
    static let icon_sauceSecret = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sauce-secret")
    /// Image `icon_sauce-tomato`.
    static let icon_sauceTomato = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sauce-tomato")
    /// Image `icon_smokey`.
    static let icon_smokey = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_smokey")
    /// Image `icon_topping-chicken`.
    static let icon_toppingChicken = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_topping-chicken")
    /// Image `icon_topping-meat`.
    static let icon_toppingMeat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_topping-meat")
    /// Image `icon_topping-shrimp`.
    static let icon_toppingShrimp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_topping-shrimp")
    /// Image `icon_topping-veggie`.
    static let icon_toppingVeggie = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_topping-veggie")
    /// Image `icons8-add-shopping-cart-100`.
    static let icons8AddShoppingCart100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-add-shopping-cart-100")
    /// Image `icons8-add-shopping-cart-50`.
    static let icons8AddShoppingCart50 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-add-shopping-cart-50")
    /// Image `icons8-credit-card-100`.
    static let icons8CreditCard100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-credit-card-100")
    /// Image `icons8-credit-card-50`.
    static let icons8CreditCard50 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-credit-card-50")
    /// Image `icons8-receive-cash-128`.
    static let icons8ReceiveCash128 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-receive-cash-128")
    /// Image `icons8-receive-cash-256`.
    static let icons8ReceiveCash256 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-receive-cash-256")
    /// Image `icons8-receive-cash-64`.
    static let icons8ReceiveCash64 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-receive-cash-64")
    /// Image `icons8-trash-can-120`.
    static let icons8TrashCan120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-trash-can-120")
    /// Image `icons8-trash-can-240`.
    static let icons8TrashCan240 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-trash-can-240")
    /// Image `icons8-trash-can-40`.
    static let icons8TrashCan40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-trash-can-40")
    /// Image `icons8-trash-can-480`.
    static let icons8TrashCan480 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-trash-can-480")
    /// Image `icons8-trash-can-80`.
    static let icons8TrashCan80 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-trash-can-80")
    /// Image `thumbnail_pizza-full-plain-cheese`.
    static let thumbnail_pizzaFullPlainCheese = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail_pizza-full-plain-cheese")
    /// Image `thumbnail_pizza-sambal-veggie`.
    static let thumbnail_pizzaSambalVeggie = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail_pizza-sambal-veggie")
    /// Image `thumbnail_pizza-spicy-sambal`.
    static let thumbnail_pizzaSpicySambal = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail_pizza-spicy-sambal")
    /// Image `thumbnail_pizza-ultim-hawaiian`.
    static let thumbnail_pizzaUltimHawaiian = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail_pizza-ultim-hawaiian")
    /// Image `thumbnail_pizza-vegie-fiesta-1`.
    static let thumbnail_pizzaVegieFiesta1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail_pizza-vegie-fiesta-1")
    /// Image `thumbnail_pizza-vegie-galore-1`.
    static let thumbnail_pizzaVegieGalore1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail_pizza-vegie-galore-1")
    /// Image `thumbnail_samyeang-chicken-pizza`.
    static let thumbnail_samyeangChickenPizza = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail_samyeang-chicken-pizza")
    /// Image `thumbnail_samyeang-tuna-pizza`.
    static let thumbnail_samyeangTunaPizza = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail_samyeang-tuna-pizza")
    
    /// `UIImage(named: "full_pizza-full-plain-cheese", bundle: ..., traitCollection: ...)`
    static func full_pizzaFullPlainCheese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_pizzaFullPlainCheese, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_pizza-sambal-veggie", bundle: ..., traitCollection: ...)`
    static func full_pizzaSambalVeggie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_pizzaSambalVeggie, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_pizza-spicy-sambal", bundle: ..., traitCollection: ...)`
    static func full_pizzaSpicySambal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_pizzaSpicySambal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_pizza-ultim-hawaiian", bundle: ..., traitCollection: ...)`
    static func full_pizzaUltimHawaiian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_pizzaUltimHawaiian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_pizza-vegie-fiesta", bundle: ..., traitCollection: ...)`
    static func full_pizzaVegieFiesta(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_pizzaVegieFiesta, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_pizza-vegie-galore", bundle: ..., traitCollection: ...)`
    static func full_pizzaVegieGalore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_pizzaVegieGalore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_samyeang-chicken-pizza", bundle: ..., traitCollection: ...)`
    static func full_samyeangChickenPizza(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_samyeangChickenPizza, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_samyeang-tuna-pizza", bundle: ..., traitCollection: ...)`
    static func full_samyeangTunaPizza(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_samyeangTunaPizza, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-image-100", bundle: ..., traitCollection: ...)`
    static func iconImage100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconImage100, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-image-50", bundle: ..., traitCollection: ...)`
    static func iconImage50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconImage50, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-image-500", bundle: ..., traitCollection: ...)`
    static func iconImage500(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconImage500, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_samyeangsaucered", bundle: ..., traitCollection: ...)`
    static func icon_samyeangsaucered(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_samyeangsaucered, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_sauce-chili", bundle: ..., traitCollection: ...)`
    static func icon_sauceChili(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sauceChili, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_sauce-pesto", bundle: ..., traitCollection: ...)`
    static func icon_saucePesto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_saucePesto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_sauce-secret", bundle: ..., traitCollection: ...)`
    static func icon_sauceSecret(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sauceSecret, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_sauce-tomato", bundle: ..., traitCollection: ...)`
    static func icon_sauceTomato(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sauceTomato, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_smokey", bundle: ..., traitCollection: ...)`
    static func icon_smokey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_smokey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_topping-chicken", bundle: ..., traitCollection: ...)`
    static func icon_toppingChicken(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_toppingChicken, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_topping-meat", bundle: ..., traitCollection: ...)`
    static func icon_toppingMeat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_toppingMeat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_topping-shrimp", bundle: ..., traitCollection: ...)`
    static func icon_toppingShrimp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_toppingShrimp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_topping-veggie", bundle: ..., traitCollection: ...)`
    static func icon_toppingVeggie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_toppingVeggie, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-add-shopping-cart-100", bundle: ..., traitCollection: ...)`
    static func icons8AddShoppingCart100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8AddShoppingCart100, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-add-shopping-cart-50", bundle: ..., traitCollection: ...)`
    static func icons8AddShoppingCart50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8AddShoppingCart50, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-credit-card-100", bundle: ..., traitCollection: ...)`
    static func icons8CreditCard100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8CreditCard100, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-credit-card-50", bundle: ..., traitCollection: ...)`
    static func icons8CreditCard50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8CreditCard50, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-receive-cash-128", bundle: ..., traitCollection: ...)`
    static func icons8ReceiveCash128(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8ReceiveCash128, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-receive-cash-256", bundle: ..., traitCollection: ...)`
    static func icons8ReceiveCash256(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8ReceiveCash256, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-receive-cash-64", bundle: ..., traitCollection: ...)`
    static func icons8ReceiveCash64(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8ReceiveCash64, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-trash-can-120", bundle: ..., traitCollection: ...)`
    static func icons8TrashCan120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8TrashCan120, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-trash-can-240", bundle: ..., traitCollection: ...)`
    static func icons8TrashCan240(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8TrashCan240, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-trash-can-40", bundle: ..., traitCollection: ...)`
    static func icons8TrashCan40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8TrashCan40, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-trash-can-480", bundle: ..., traitCollection: ...)`
    static func icons8TrashCan480(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8TrashCan480, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-trash-can-80", bundle: ..., traitCollection: ...)`
    static func icons8TrashCan80(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8TrashCan80, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumbnail_pizza-full-plain-cheese", bundle: ..., traitCollection: ...)`
    static func thumbnail_pizzaFullPlainCheese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail_pizzaFullPlainCheese, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumbnail_pizza-sambal-veggie", bundle: ..., traitCollection: ...)`
    static func thumbnail_pizzaSambalVeggie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail_pizzaSambalVeggie, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumbnail_pizza-spicy-sambal", bundle: ..., traitCollection: ...)`
    static func thumbnail_pizzaSpicySambal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail_pizzaSpicySambal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumbnail_pizza-ultim-hawaiian", bundle: ..., traitCollection: ...)`
    static func thumbnail_pizzaUltimHawaiian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail_pizzaUltimHawaiian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumbnail_pizza-vegie-fiesta-1", bundle: ..., traitCollection: ...)`
    static func thumbnail_pizzaVegieFiesta1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail_pizzaVegieFiesta1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumbnail_pizza-vegie-galore-1", bundle: ..., traitCollection: ...)`
    static func thumbnail_pizzaVegieGalore1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail_pizzaVegieGalore1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumbnail_samyeang-chicken-pizza", bundle: ..., traitCollection: ...)`
    static func thumbnail_samyeangChickenPizza(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail_samyeangChickenPizza, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumbnail_samyeang-tuna-pizza", bundle: ..., traitCollection: ...)`
    static func thumbnail_samyeangTunaPizza(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail_samyeangTunaPizza, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 9 nibs.
  struct nib {
    /// Nib `AddressAutoCompleteTableViewCell`.
    static let addressAutoCompleteTableViewCell = _R.nib._AddressAutoCompleteTableViewCell()
    /// Nib `DominoCartCollectionViewCell`.
    static let dominoCartCollectionViewCell = _R.nib._DominoCartCollectionViewCell()
    /// Nib `DominoPizzaHomeCollectionViewCell`.
    static let dominoPizzaHomeCollectionViewCell = _R.nib._DominoPizzaHomeCollectionViewCell()
    /// Nib `ManageAddressUIView`.
    static let manageAddressUIView = _R.nib._ManageAddressUIView()
    /// Nib `OrderSummaryUIView`.
    static let orderSummaryUIView = _R.nib._OrderSummaryUIView()
    /// Nib `PaymentMethodUIView`.
    static let paymentMethodUIView = _R.nib._PaymentMethodUIView()
    /// Nib `PizzaCollectionView`.
    static let pizzaCollectionView = _R.nib._PizzaCollectionView()
    /// Nib `ShipmentDetailsUIView`.
    static let shipmentDetailsUIView = _R.nib._ShipmentDetailsUIView()
    /// Nib `ToppingDropDownListTableViewCell`.
    static let toppingDropDownListTableViewCell = _R.nib._ToppingDropDownListTableViewCell()
    
    /// `UINib(name: "AddressAutoCompleteTableViewCell", in: bundle)`
    static func addressAutoCompleteTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressAutoCompleteTableViewCell)
    }
    
    /// `UINib(name: "DominoCartCollectionViewCell", in: bundle)`
    static func dominoCartCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dominoCartCollectionViewCell)
    }
    
    /// `UINib(name: "DominoPizzaHomeCollectionViewCell", in: bundle)`
    static func dominoPizzaHomeCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dominoPizzaHomeCollectionViewCell)
    }
    
    /// `UINib(name: "ManageAddressUIView", in: bundle)`
    static func manageAddressUIView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageAddressUIView)
    }
    
    /// `UINib(name: "OrderSummaryUIView", in: bundle)`
    static func orderSummaryUIView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderSummaryUIView)
    }
    
    /// `UINib(name: "PaymentMethodUIView", in: bundle)`
    static func paymentMethodUIView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodUIView)
    }
    
    /// `UINib(name: "PizzaCollectionView", in: bundle)`
    static func pizzaCollectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pizzaCollectionView)
    }
    
    /// `UINib(name: "ShipmentDetailsUIView", in: bundle)`
    static func shipmentDetailsUIView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shipmentDetailsUIView)
    }
    
    /// `UINib(name: "ToppingDropDownListTableViewCell", in: bundle)`
    static func toppingDropDownListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toppingDropDownListTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DominoCartCollectionViewCell`.
    static let dominoCartCollectionViewCell: Rswift.ReuseIdentifier<DominoCartCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "DominoCartCollectionViewCell")
    /// Reuse identifier `DominoPizzaHomeCollectionViewCell`.
    static let dominoPizzaHomeCollectionViewCell: Rswift.ReuseIdentifier<DominoPizzaHomeCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "DominoPizzaHomeCollectionViewCell")
    /// Reuse identifier `ToppingDropDownListTableViewCell`.
    static let toppingDropDownListTableViewCell: Rswift.ReuseIdentifier<ToppingDropDownListTableViewCell> = Rswift.ReuseIdentifier(identifier: "ToppingDropDownListTableViewCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<AddressAutoCompleteTableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `DominoCartViewController`, and contains static references to 1 segues.
    struct dominoCartViewController {
      /// Segue identifier `dominoCartToCheckOutID`.
      static let dominoCartToCheckOutID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DominoCartViewController, DominoCheckoutViewController> = Rswift.StoryboardSegueIdentifier(identifier: "dominoCartToCheckOutID")
      
      /// Optionally returns a typed version of segue `dominoCartToCheckOutID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func dominoCartToCheckOutID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DominoCartViewController, DominoCheckoutViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dominoCartViewController.dominoCartToCheckOutID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `DominoCheckoutViewController`, and contains static references to 1 segues.
    struct dominoCheckoutViewController {
      /// Segue identifier `CheckoutToShipmentDetails`.
      static let checkoutToShipmentDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DominoCheckoutViewController, DominoShipmentDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CheckoutToShipmentDetails")
      
      /// Optionally returns a typed version of segue `CheckoutToShipmentDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func checkoutToShipmentDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DominoCheckoutViewController, DominoShipmentDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dominoCheckoutViewController.checkoutToShipmentDetails, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `DominoHomeViewController`, and contains static references to 1 segues.
    struct dominoHomeViewController {
      /// Segue identifier `pizzaHomeToPizzaHomeDetailID`.
      static let pizzaHomeToPizzaHomeDetailID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DominoHomeViewController, DominoPizzaHomeDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "pizzaHomeToPizzaHomeDetailID")
      
      /// Optionally returns a typed version of segue `pizzaHomeToPizzaHomeDetailID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pizzaHomeToPizzaHomeDetailID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DominoHomeViewController, DominoPizzaHomeDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dominoHomeViewController.pizzaHomeToPizzaHomeDetailID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `DominoPizzaHomeDetailViewController`, and contains static references to 1 segues.
    struct dominoPizzaHomeDetailViewController {
      /// Segue identifier `pizzaDetailToPizzaCartID`.
      static let pizzaDetailToPizzaCartID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DominoPizzaHomeDetailViewController, DominoCartViewController> = Rswift.StoryboardSegueIdentifier(identifier: "pizzaDetailToPizzaCartID")
      
      /// Optionally returns a typed version of segue `pizzaDetailToPizzaCartID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pizzaDetailToPizzaCartID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DominoPizzaHomeDetailViewController, DominoCartViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dominoPizzaHomeDetailViewController.pizzaDetailToPizzaCartID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 4 localization keys.
    struct main {
      /// Base translation: 
      /// 
      /// Locales: Base
      static let base_URL = Rswift.StringResource(key: "BASE_URL", tableName: "Main", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Back
      /// 
      /// Locales: zh-Hant, Base, ms
      static let navigation_button_back = Rswift.StringResource(key: "navigation_button_back", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hant", "Base", "ms"], comment: nil)
      /// Base translation: Pizza Home
      /// 
      /// Locales: zh-Hant, Base, ms
      static let navigation_home_title = Rswift.StringResource(key: "navigation_home_title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hant", "Base", "ms"], comment: nil)
      /// Base translation: Pizza Info
      /// 
      /// Locales: zh-Hant, Base, ms
      static let navigation_homedetail_title = Rswift.StringResource(key: "navigation_homedetail_title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hant", "Base", "ms"], comment: nil)
      
      /// Base translation: 
      /// 
      /// Locales: Base
      static func base_URL(_: Void = ()) -> String {
        return NSLocalizedString("BASE_URL", tableName: "Main", bundle: R.hostingBundle, value: "", comment: "")
      }
      
      /// Base translation: Back
      /// 
      /// Locales: zh-Hant, Base, ms
      static func navigation_button_back(_: Void = ()) -> String {
        return NSLocalizedString("navigation_button_back", tableName: "Main", bundle: R.hostingBundle, value: "Back", comment: "")
      }
      
      /// Base translation: Pizza Home
      /// 
      /// Locales: zh-Hant, Base, ms
      static func navigation_home_title(_: Void = ()) -> String {
        return NSLocalizedString("navigation_home_title", tableName: "Main", bundle: R.hostingBundle, value: "Pizza Home", comment: "")
      }
      
      /// Base translation: Pizza Info
      /// 
      /// Locales: zh-Hant, Base, ms
      static func navigation_homedetail_title(_: Void = ()) -> String {
        return NSLocalizedString("navigation_homedetail_title", tableName: "Main", bundle: R.hostingBundle, value: "Pizza Info", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DominoCartCollectionViewCell.validate()
    }
    
    struct _AddressAutoCompleteTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddressAutoCompleteTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "cell"
      let name = "AddressAutoCompleteTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddressAutoCompleteTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressAutoCompleteTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DominoCartCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DominoCartCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "DominoCartCollectionViewCell"
      let name = "DominoCartCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DominoCartCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DominoCartCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icons8-trash-can-40", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icons8-trash-can-40' is used in nib 'DominoCartCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _DominoPizzaHomeCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DominoPizzaHomeCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "DominoPizzaHomeCollectionViewCell"
      let name = "DominoPizzaHomeCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DominoPizzaHomeCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DominoPizzaHomeCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ManageAddressUIView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ManageAddressUIView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _OrderSummaryUIView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderSummaryUIView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentMethodUIView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PaymentMethodUIView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PizzaCollectionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PizzaCollectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ShipmentDetailsUIView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ShipmentDetailsUIView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ToppingDropDownListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ToppingDropDownListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ToppingDropDownListTableViewCell"
      let name = "ToppingDropDownListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ToppingDropDownListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToppingDropDownListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let dominoCheckoutViewController = StoryboardViewControllerResource<DominoShipmentDetailsViewController>(identifier: "DominoCheckoutViewController")
      let dominoHomeViewController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "DominoHomeViewController")
      let name = "Main"
      
      func dominoCheckoutViewController(_: Void = ()) -> DominoShipmentDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dominoCheckoutViewController)
      }
      
      func dominoHomeViewController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dominoHomeViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icons8-receive-cash-64") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icons8-receive-cash-64' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icons8-add-shopping-cart-50") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icons8-add-shopping-cart-50' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icons8-credit-card-50") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icons8-credit-card-50' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().dominoHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dominoHomeViewController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().dominoCheckoutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dominoCheckoutViewController' could not be loaded from storyboard 'Main' as 'DominoShipmentDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
